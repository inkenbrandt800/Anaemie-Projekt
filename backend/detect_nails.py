# --------------------------------------------------------------#  YOLO-v8 Fingernagel-Erkennung + Vorschaubild# --------------------------------------------------------------from pathlib import Pathimport cv2, numpy as npfrom ultralytics import YOLO# Ordner, in dem dieses Skript liegt  →  dort liegt auch best.ptROOT = Path(__file__).resolve().parentYOLO_WEIGHTS = ROOT / "best.pt"          # <-- dein YOLO-Gewicht# Modell lazy-laden (= erst beim 1. Aufruf)_yolo_model = Nonedef _get_model():    global _yolo_model    if _yolo_model is None:        _yolo_model = YOLO(str(YOLO_WEIGHTS))    return _yolo_modeldef detect_and_annotate(img_bytes: bytes,                        conf_thres: float = 0.25):    """    • Liefert:        boxes      : Liste Dikt   {"id", "x1","y1","x2","y2","score"}        jpg_bytes  : Annotiertes JPEG        avg_rgbs   : Liste Tuple  (R,G,B) pro Box    """    img_arr   = np.frombuffer(img_bytes, dtype=np.uint8)    img       = cv2.imdecode(img_arr, cv2.IMREAD_COLOR)        # BGR    model     = _get_model()    result    = model(img, conf=conf_thres, verbose=False)[0]    boxes, avg_rgbs = [], []    annotated = img.copy()    for i, box in enumerate(result.boxes.xyxy.cpu().numpy()):        x1, y1, x2, y2 = map(int, box[:4])        score          = float(result.boxes.conf[i])        # Box speichern        boxes.append({            "id": i,            "x1": x1, "y1": y1, "x2": x2, "y2": y2,            "score": round(score, 3)        })        # Mittelwert-RGB im Crop        crop     = img[y1:y2, x1:x2]        mean_bgr = crop.mean(axis=(0,1))        avg_rgbs.append(tuple(float(c) for c in mean_bgr[::-1]))   # → RGB        # Box ins Vorschaubild zeichnen        cv2.rectangle(annotated, (x1,y1), (x2,y2), (0,255,0), 2)        cv2.putText(annotated, f"{i}:{score:.2f}",                    (x1, y1-5), cv2.FONT_HERSHEY_SIMPLEX,                    0.5, (0,255,0), 1, cv2.LINE_AA)    # BGR → JPEG-Bytes    _, jpg_bytes = cv2.imencode(".jpg", annotated)    return boxes, jpg_bytes.tobytes(), avg_rgbs