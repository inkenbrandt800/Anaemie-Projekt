# predict_hb.py# --------------------------------------------------------------#  Nutzt detect_nails  +  Random-Forest-Regressor,#  um aus allen (oder gefilterten) Box-Crops den Hb-Wert zu schätzen# --------------------------------------------------------------from pathlib import Pathimport numpy as npimport joblibfrom detect_nails import detect_and_annotateROOT = Path(__file__).resolve().parentRF_PICKLE = ROOT / "model_rf_rgb_avg.pkl"     # <-- dein Pickle-Dateiname_regressor = joblib.load(RF_PICKLE)def predict_hb(img_bytes: bytes,               keep_ids=None) -> float:    """    img_bytes   : Original-JPEG-Bytes der Hand    keep_ids    : Liste Box-IDs → nur diese Boxen werden genutzt    ------------------------------------------------------------    Rückgabe    : Hb-Schätzung in g/L   (float)    """    boxes, _, avg_rgbs = detect_and_annotate(img_bytes)    # Boxen filtern ------------------------------------------------    if keep_ids is not None:        mask = [i in keep_ids for i in range(len(boxes))]    else:        mask = [True]*len(boxes)    if not any(mask):        raise ValueError("No boxes left after filtering.")    # Mittelwert über die gewählten Boxen -------------------------    sel_rgbs = np.array([avg_rgbs[i] for i, m in enumerate(mask) if m])    r_avg, g_avg, b_avg = sel_rgbs.mean(axis=0)    # Regressor-Eingabe 2D    X = np.array([[r_avg, g_avg, b_avg]])    hb_pred = float(_regressor.predict(X)[0])    return hb_pred